/*
 * The MIT License
 *
 * Copyright 2020 Maximiliano Fern√°ndez thebluemax13 at gmail.com.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.max.backgroundlinuxmanager.components.XmlWallpaperComponent;

import com.max.backgroundlinuxmanager.components.MainFrame.MainFrameListener;

import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

/**
 *
 * @author max
 */
public class XmlPanelNav extends javax.swing.JPanel implements ItemListener {

    
    /**
     * Creates new form XmlPanelNav
     */
    public XmlPanelNav() {
        initComponents();
    }
/**
 * 
 * @param filemanes Strimg[]
 * @return void
 */
    public String poblateCombo(String[] filemanes) {
        for (String filemane : filemanes) {
            wallpaperCombo.addItem(filemane);
        }
        return (String) wallpaperCombo.getItemAt(0);
    }
    
    public void setCloseListener(MainFrameListener listener){
        cancellWallpaperBtn.setActionCommand(MainFrameListener.CLOSE_XML_WALLPAPER);
        cancellWallpaperBtn.addActionListener(listener);
    }
    public void setAddListener(XmlWallpaperListener listener){
        newXmlWallpaperBtn.setActionCommand(XmlWallpaperListener.NEW_XML_WALLPAPER);
        newXmlWallpaperBtn.addActionListener(listener);
    }
    /**
     *
     * @param e ItemEvent
     */
    @Override
    public void itemStateChanged(ItemEvent e) {
        System.out.println("Selected" + e.getStateChange());
        if (e.getSource() == wallpaperCombo && e.getStateChange() == 1) {
            //  buildWallpapers((String) wallpaperCombo.getSelectedItem());
            // clear();
            //   seeWallpaper();
      //      System.out.println((String) wallpaperCombo.getSelectedItem());
            // buildWallpapers(String filename)
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        setBackground(new Color(44,124,7));
        newXmlWallpaperBtn = new javax.swing.JButton();
        cancellWallpaperBtn = new javax.swing.JButton();
        setBorder(new LineBorder(new Color(33,33,33)));
        setLayout(new java.awt.GridBagLayout());

        newXmlWallpaperBtn.setText("ADD NEW");

        cancellWallpaperBtn.setText("CLOSE");
        cancellWallpaperBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancellWallpaperBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();

        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
        add(cancellWallpaperBtn, gridBagConstraints);

        wallpaperCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wallpaperComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();

        gridBagConstraints.ipadx = 198;
        gridBagConstraints.anchor = GridBagConstraints.CENTER;

        add(wallpaperCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();

        // gridBagConstraints.fill = GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = GridBagConstraints.NORTHEAST;
        add(newXmlWallpaperBtn, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void cancellWallpaperBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancellWallpaperBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancellWallpaperBtnActionPerformed

    private void wallpaperComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wallpaperComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wallpaperComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton cancellWallpaperBtn;
    protected javax.swing.JButton newXmlWallpaperBtn;
    public final javax.swing.JComboBox<String> wallpaperCombo = new javax.swing.JComboBox<>();
    // End of variables declaration//GEN-END:variables

}
